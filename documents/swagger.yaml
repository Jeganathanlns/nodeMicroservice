openapi: 3.0.0
info:
  title: Node Microservice API
  version: 1.0.0
  description: User management microservice with OTP validation, Redis caching, and JWT authentication
  contact:
    name: API Support
    email: support@example.com
  license:
    name: MIT

servers:
  - url: http://localhost:3000/api
    description: Development server
  - url: https://api.example.com/api
    description: Production server

paths:
  /health:
    get:
      tags:
        - Health
      summary: Health check
      description: Check the health status of all connected services
      responses:
        '200':
          description: Service health status
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ok, degraded]
                  mysql:
                    type: boolean
                  mongodb:
                    type: boolean
                  errors:
                    type: array
                    items:
                      type: string
              example:
                status: "ok"
                mysql: true
                mongodb: true

  /users/generate-otp:
    post:
      tags:
        - Users
      summary: Generate OTP for user registration
      description: Generate a 6-digit OTP for email verification during user registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
      responses:
        '200':
          description: OTP generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  otp:
                    type: number
              example:
                message: "OTP sent"
                otp: 123456
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'

  /users/verify-otp:
    post:
      tags:
        - Users
      summary: Verify OTP
      description: Verify the OTP sent to user's email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - otp
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                otp:
                  type: integer
                  minimum: 100000
                  maximum: 999999
                  example: 123456
      responses:
        '200':
          description: OTP verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  verified:
                    type: boolean
                  message:
                    type: string
              example:
                verified: true
                message: "OTP verified successfully"
        '400':
          description: Invalid OTP
          content:
            application/json:
              schema:
                type: object
                properties:
                  verified:
                    type: boolean
                  error:
                    type: string
              example:
                verified: false
                error: "Invalid or expired OTP"
        '500':
          $ref: '#/components/responses/InternalError'

  /users/register-data:
    post:
      tags:
        - Users
      summary: Store registration data
      description: Store user registration data in Redis after OTP verification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstname
                - lastname
                - email
                - password
              properties:
                firstname:
                  type: string
                  minLength: 2
                  maxLength: 50
                  example: "John"
                lastname:
                  type: string
                  minLength: 2
                  maxLength: 50
                  example: "Doe"
                email:
                  type: string
                  format: email
                  example: "john.doe@example.com"
                password:
                  type: string
                  minLength: 8
                  example: "SecurePass123!"
                createdBy:
                  type: string
                  example: "admin"
      responses:
        '200':
          description: Registration data stored successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  email:
                    type: string
                  status:
                    type: string
              example:
                message: "Registration data stored"
                email: "john.doe@example.com"
                status: "pending"
        '400':
          description: Email not verified
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              example:
                error: "Email not verified. Please verify your email first."
        '500':
          $ref: '#/components/responses/InternalError'

  /users/register:
    post:
      tags:
        - Users
      summary: Register new user with OTP validation
      description: Create a new user account after validating the OTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalError'

  /users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieve a list of all registered users
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieve a specific user by their ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

    put:
      tags:
        - Users
      summary: Update user
      description: Update user information
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

    delete:
      tags:
        - Users
      summary: Delete user
      description: Delete a user account
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User deleted"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /users/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and return JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: "john_doe"
                password:
                  type: string
                  format: password
                  example: "SecurePass123!"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalError'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        firstname:
          type: string
          example: "John"
        lastname:
          type: string
          example: "Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        createdBy:
          type: string
          example: "system"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00.000Z"

    UserRegistration:
      type: object
      required:
        - firstname
        - lastname
        - email
        - password
      properties:
        firstname:
          type: string
          minLength: 2
          maxLength: 50
          example: "John"
        lastname:
          type: string
          minLength: 2
          maxLength: 50
          example: "Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        password:
          type: string
          minLength: 8
          example: "SecurePass123!"

        createdBy:
          type: string
          example: "admin"

    UserUpdate:
      type: object
      properties:
        firstname:
          type: string
          minLength: 2
          maxLength: 50
          example: "John"
        lastname:
          type: string
          minLength: 2
          maxLength: 50
          example: "Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"

    Error:
      type: object
      properties:
        message:
          type: string
          example: "Error message"
        code:
          type: string
          example: "ERROR_CODE"

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized access
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT